// This file is automatically generated. See gqlcodegen.yml for details
import { z } from "zod";
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Mutation = {
  readonly save: Scalars["Boolean"];
};

export type MutationSaveArgs = {
  record: RecordInput;
  recordID: Scalars["String"];
};

export type Query = {
  readonly query: ReadonlyArray<Scalars["String"]>;
};

export type QueryQueryArgs = {
  search: Scalars["String"];
};

export type RecordInput = {
  readonly foo: Scalars["String"];
};

type Properties<T> = Required<{
  [K in keyof T]: z.ZodType<T[K], any, T[K]>;
}>;

type definedNonNullAny = {};

export const isDefinedNonNullAny = (v: any): v is definedNonNullAny =>
  v !== undefined && v !== null;

export const definedNonNullAnySchema = z
  .any()
  .refine((v) => isDefinedNonNullAny(v));

export function RecordInputSchema(): z.ZodObject<Properties<RecordInput>> {
  return z.object({
    foo: z.string(),
  });
}

export function RecordMutationVariablesSchema(): z.ZodObject<
  Properties<{ recordID: string; record: RecordInput }>
> {
  return z.object({
    recordID: z.string(),
    record: z.object({
      foo: z.string(),
    }),
  });
}

export type SaveMutationVariables = Exact<{
  recordID: Scalars["String"];
  record: RecordInput;
}>;

export type SaveMutation = { readonly save: boolean };

export type QueryQueryVariables = Exact<{
  search: Scalars["String"];
}>;

export function QueryQueryVariablesSchema(): z.ZodObject<
  Properties<QueryQueryVariables>
> {
  return z.object({
    search: z.string(),
  });
}

export type QueryQuery = { readonly query: ReadonlyArray<string> };
