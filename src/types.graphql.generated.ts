// This file is automatically generated. See gqlcodegen.yml for details
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type BarInput = {
  readonly bar: Scalars["String"];
};

export type BarPayload = {
  readonly field: Scalars["String"];
};

export type FooInput = {
  readonly foo: Scalars["String"];
};

export type FooPayload = {
  readonly field: Scalars["String"];
};

export type Mutation = {
  readonly bar: BarPayload;
  readonly foo: FooPayload;
};

export type MutationBarArgs = {
  input: BarInput;
};

export type MutationFooArgs = {
  input: FooInput;
};

export type Query = {
  readonly query?: Maybe<Scalars["String"]>;
};
